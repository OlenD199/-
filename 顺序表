#include <stdio.h>
#include <string.h>
#include <stdlib.h>

//动态数组结构体定义
typedef struct DYNAMICARRAY
{
	int* pAddr;//存放元素的地址
	int size;//当前有多少个元素
	int capacity;//容量，表示当前能够存放的最大元素数量
}Dynamic_Array;

//对结构体DYNAMICARRAY进行操作的函数：
//初始化
Dynamic_Array* Init_Array()
{
	//申请内存
	Dynamic_Array* myArray = (Dynamic_Array*)malloc(sizeof(Dynamic_Array));
	//初始化
	myArray->size = 0;
	myArray->capacity = 20;
	myArray->pAddr = (int*)malloc(sizeof(int) * myArray->capacity);//动态申请数组，这里的*表示乘号
	return myArray;
}
//插入（默认末尾位置插入）
void PushBack_Array(Dynamic_Array* arr, int value)
{
	if (arr == NULL)
	{
		return;
	}
	//判断空间是否足够
	if (arr->size == arr->capacity)//size表示当前有多少个元素，而capacity表示容量，size不可能大于capacity，所以当size==capacity时，表示空间不足
	{
		//第一步 申请（给数组）一块更大的内存，新内存是旧内存的两倍(默认两倍）
		int* newSpace = (int*)malloc(sizeof(int) * arr->capacity * 2);

		//第二步 拷贝数据到新空间
		memcpy(newSpace,arr->pAddr,arr->capacity*sizeof(int));
		//memcpy中第一个是新空间的地址，第二个是就空间的地址，第三个是总大小（容量大小*相关类型字节大小）
		
		//第三步 释放旧空间
		free(arr->pAddr);

		//更新容量
		arr->capacity *= 2;
		arr->pAddr = newSpace;
	}
	//插入（默认尾部位置）
	arr->pAddr[arr->size] = value;
	arr->size++;

}
//根据位置删除
void RemoveByPos_Array(Dynamic_Array* arr, int pos)
{
	if (arr == NULL)
	{
		return;
	}
	//判断位置是否有效
	if (pos < 0 || pos >= arr->size)
	{
		return;
	}
	//删除元素
	for (int i = pos; i < arr->size - 1; i++)
	{
		arr->pAddr[i] = arr->pAddr[ i + 1 ];
	}
	//更新元素个数
	arr->size--;
}
//根据值删除(删除value第一次出现的位置)
void RemoveByValue_Array(Dynamic_Array* arr, int value)
{
	if (arr == NULL)
	{
		return;
	}
	//调用函数查找该值的位置
	int pos = -1;
	for (int i = 0; i < arr->size; i++)
	{
		if (arr->pAddr[i] == value)
		{
			pos = i;
			break;
		}
	}
	//调用函数删除元素
	RemoveByPos_Array(arr, pos);

}
//查找
int Find_Array(Dynamic_Array* arr, int value)
{
	if (arr == NULL)
	{
		return -1;
	}
	int pos = -1;
	for (int i = 0; i < arr->size; i++)
	{
		if (arr->pAddr[i] == value)
		{
			pos = i;
			break;
		}
	}
	return pos;
}
//打印
void Print_Array(Dynamic_Array* arr)
{
	if (arr == NULL)
	{
		return;
	}
	for (int i = 0; i < arr->size; i++)
	{
		printf("%d ", arr->pAddr[i]);
	}
	printf("\n");
}
//释放动态数组内存
void FreeSpace_Array(Dynamic_Array* arr)
{
	if (arr == NULL)
	{
		return;
	}
	if (arr->pAddr != NULL)
	{
		free(arr->pAddr);
	}
	free(arr);
	//动态申请过两次，所以要释放两次，一次是结构体的数组，一次是结构体
}

//清空数组
void Clear_Array(Dynamic_Array* arr)
{
	if (arr == NULL)
	{
		return;
	}
	//arr->pArr 指向的是空间，根据size来插入，size表示当前数组有多少个元素，当size==0时，表示无元素，所以可以根据size来清空数组
	arr->size = 0;
}
//获得动态数组容量
int Capacity_Array(Dynamic_Array* arr)
{
	if (arr == NULL)
	{
		return 0;
	}

	return arr->capacity;
}
//获得动态数组当前元素个数
int Size_Array(Dynamic_Array* arr)
{
	if (arr == NULL)
	{
		return 0;
	}
	return arr->size;
}
//根据位置获得某个位置的元素
int At_Array(Dynamic_Array* arr, int pos)
{
	if (arr == NULL)
	{
		return 0;
	}
	return arr->pAddr[pos];//pos表示一个位置，根据这个位置来获得该位置的元素
}

void Print_some(Dynamic_Array* arr)
{
	printf("容量：%d\n", arr->capacity);
	printf("元素个数：%d\n", arr->size);
}

void test_1(int num)
{
	//初始化动态数组
	Dynamic_Array* myArray = Init_Array();
	printf("打印出容量和元素个数(未导入值)\n");
	Print_some(myArray);
	printf("\n");
	//插入元素
	for (int i = 0; i < num; i++)
	{
		PushBack_Array(myArray, i);
	}
	printf("打印出容量和元素个数(导入值后)\n");
	Print_some(myArray);
	printf("\n");
	//打印
	printf("打印数字元素：\n");
	Print_Array(myArray);
	printf("\n");
	//查找位置,并根据该位置找到元素
	int count;
	printf("请输入要查找的元素：>  ");
	scanf("%d", &count);
	int ret = Find_Array(myArray, count);
	printf("元素：%d    位置(数组下标)：%d\n", At_Array(myArray, ret), ret);
	printf("\n");
	//删除
	RemoveByPos_Array(myArray, 2);
	RemoveByValue_Array(myArray, 7);
	printf("打印出容量和元素个数(删除值后)\n");
	Print_some(myArray);
	printf("打印数字元素(删除值后):\n");
	Print_Array(myArray);
	printf("\n");
	//销毁
	FreeSpace_Array(myArray);
	printf("打印出容量和元素个数（销毁后，容量和元素数目都应该为随机值）\n");
	Print_some(myArray);
	printf("\n");
}

int main()
{
	int num = 10;
	printf("不申请新内存:\n");
	test_1(num);
	printf("\n\n");
	num = 30;
	printf("申请新内存:\n");
	test_1(num);
	return 0;
}
