#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define MAX 100

typedef struct stack
{
	int *data;
	int top;
	int stackSize;
}SqStack;

//初始化
int InitSqStack(SqStack* LS, int max)
{
	LS->data = (int*)malloc(sizeof(int) * max);
	if (LS->data == NULL)
	{
		printf("空间申请失败！\n");
		return 0;
	}
	LS->stackSize = max;
	LS->top = -1;
	return 1;
}

//判断栈空
int SqStackEmpty(SqStack S)
{
	if (S.top == -1)
		return 1;
	return 0;
}

//得到栈顶
int SqStackGetTop(SqStack S, int* e)
{
	if (SqStackEmpty(S) == 1)
	{
		return 0;//栈空
	}
	*e = S.data[S.top];
	return 1;
}

//求栈的长度
int StackLength(SqStack S)
{
	return S.top + 1;
}

//进栈
int SqStackPush(SqStack* LS, int e)//需要改变栈的内容，所以需要穿地址，e表示要进栈的数据
{
	if (LS->stackSize == LS->top + 1)
	{
		return 0;//栈已满
	}
	LS->top++;
	LS->data[LS->top] = e;
	return 1;
}

//出栈
int SqStackPop(SqStack* LS, int* e)//e表示返回需要出栈的数据
{
	if (LS->top == -1)
	{
		return 0;//栈空
	}
	*e = LS->data[LS->top];
	LS->top--;
	return 1;
}

//遍历操作
int SqStackTravers(SqStack S)
{
	if (S.top == -1)
	{
		return 0;//栈空
	}
	for (int i = S.top; i >= 0; i--)
	{
		printf("%d ", S.data[i]);
	}
	printf("\n");
	return 1;
}

int main()
{
	SqStack S;
	InitSqStack(&S, MAX);
	int e;
	int ret = SqStackEmpty(S);
	if (ret == 1)
	{
		printf("栈空\n");
	}
	else
	{
		SqStackGetTop(S, &e);
		printf("%d\n", e);
	}
	printf("please input data:>\t");
	int num;
	for (int k = 0; k < 2; k++)
	{
		scanf("%d", &num);
		SqStackPush(&S, num);
	}
	SqStackPop(&S, &e);
	printf("%d \n", e);
	for (int k = 0; k <= S.top; k++)
	{
		SqStackTravers(S);
	}
	return 0;
}
