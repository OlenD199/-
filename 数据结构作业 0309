//（1）编写input函数，传入二维数组为参数，在函数内输入数据并保存到二维数组内；
//（2）编写output函数，将二维数组当做一维数组传入函数，输出二维数组中的元素；
//（3）编写函数传入二维数组，求出二维数组的最大、最小和平均值，并且采用两种以上的方法将它们返回到主函数中。要求：不能采用全局变量返回。
//（4）编写主函数，定义一个二维数组，调用（1）、（2）、（3）函数进行测试验证。

#include <stdio.h>
#include <stdlib.h>


typedef struct Some_num
{
	int num_max;
	int num_min;
	float num_avg;
}sN,*sNm;

void Input(int* arr, int x, int y)
{
	int i = 0, j = 0;
	for (i = 0; i < x; i++)
	{
		for (j = 0; j < y; j++)
		{
			scanf("%d", arr + i * y + j);
		}
	}
}

void Output(int* arr, int z)
{
	for (int i = 0; i < z; i++)
	{
		printf("%d ", *(arr + i));
	}
	printf("\n");
}

void Way_1(int* arr, int size, int* max, int* min, float* c)
{
	int *a = arr,*b=arr;
	int i = 0;
	float sum = 0;
	for (i = 0; i < size; i++)
	{
		if (*a < *(arr + i))
			a = arr + i;
		if (*b > *(arr + i))
			a = arr + i;
		sum += *(arr + i);
	}
	*c = sum / size;
	*max = *a;
	*min = *b;
}

void Way_2(int*arr,int size,sNm n1)
{
	n1->num_max = *arr;
	n1->num_min = *arr;
	for (int i = 0; i < size; i++)
	{
		if (n1->num_max < *(arr + i))
			n1->num_max = *(arr + i);
		if (n1->num_min > *(arr + i))
			n1->num_min = *(arr + i);
		n1->num_avg += *(arr + i);
	}
	n1->num_avg /= size;
}

sNm Init()
{
	//申请内存
	sNm n1 = (sNm)malloc(sizeof(sN));
	//初始化
	n1->num_avg = 0;
	n1->num_max = 0;
	n1->num_min = 0;

	return n1;
}

int main()
{
	int sz1 = 4;
	int sz2 = 5;
	int* parr = (int*)malloc(sizeof(int) * sz1 * sz2);
	printf("第1问：\n");
	Input(parr, sz1, sz2);
	for (int i = 0; i < sz1; i++)
	{
		for (int j = 0; j < sz2; j++)
		{
			printf("%d ", *(parr + i * sz2 + j));
		}
		printf("\n");
	}
	printf("第2问：\n");
	int sz3 = sz1 * sz2;
	Output(parr, sz3);
	printf("第3问：\n");
	int max = 0, min = 0;
	float avg = 0;
	Way_1(parr, sz3, &max, &min, &avg);
	printf("%d %d %.2f\n", max, min, avg);
	//结构体初始化
	sNm n1 = Init();
	Way_2(parr, sz3, n1);
	printf("%d %d %.2f\n", n1->num_max,n1->num_min, n1->num_avg);

	return 0;
}
