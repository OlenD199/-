//有关顺序表

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 20

//定义结构体
typedef struct
{
	int capacity;//定义最大容量
	int size;//定义当前存放的元素个数
	int* pArr;//动态定义一个数组
}Dynamic;

//有关函数的声明：
Dynamic* Init_Array();//初始化结构体
void Insert_Array(Dynamic* arr,int value);//插入元素（默认从末尾插入）
int FindByPos_Array(Dynamic* arr, int pos);//根据位置查找元素数值
int FindByValue_Array(Dynamic* arr, int value);//根据值查找元素位置
void DeleteByPos_Array(Dynamic* arr, int pos);//根据位置删除元素
void DeleteByValue_Array(Dynamic* arr, int value);//根据值删除元素
void Print_Array(Dynamic* arr);//打印函数
int GetCapacity_Array(Dynamic* arr);//得到数组容量
int GetSize_Array(Dynamic* arr);//得到数组目前的元素数
void FreeSpace_Array(Dynamic* arr);//释放动态数组内存
void Clear_Array(Dynamic* arr);//清空数组（将数组中的元素全部变为0）
void Print_capsiz(Dynamic* arr);

int main()
{
	int num;
	printf("请输入要插入的元素个数：>\t");
	scanf("%d", & num);
	Dynamic* MyArray = Init_Array();
	//1.先插入
	for (int i = 0; i < num; i++)
	{
		Insert_Array(MyArray, i);
	}
	Print_capsiz(MyArray);
	int pos;
	int ret;
	printf("请输入要查找的元素位置：>\t");
	scanf("%d", &pos);
	ret = FindByPos_Array(MyArray, pos);
	printf("根据位置所查找的值为：>%d\n", ret);
	printf("请输入要查找的元素的值：>\t");
	int value;
	scanf("%d", &value);
	ret = FindByValue_Array(MyArray, value);
	printf("根据值所查找的位置为：>%d\n", ret);
	printf("请输入要删除的元素位置：>\t");
	scanf("%d", &pos);
	DeleteByPos_Array(MyArray, pos);
	printf("删除后数组为：\n");
	Print_Array(MyArray);
	Print_capsiz(MyArray);
	printf("请输入要删除的元素值：>\t");
	scanf("%d", &value);
	DeleteByValue_Array(MyArray, value);
	printf("删除后数组为：\n");
	Print_Array(MyArray);
	Print_capsiz(MyArray);
	Clear_Array(MyArray);
	FreeSpace_Array(MyArray);

	return 0;
}

Dynamic* Init_Array()
{
	//动态申请内存(给结构体申请内存)
	Dynamic* MyArray = (Dynamic*)malloc(sizeof(Dynamic));
	//初始化容量和当前元素个数
	MyArray->capacity = MAX;
	MyArray->size = 0;
	//动态申请内存(给数组申请内存，该数组属于结构体，该结构体的名字为MyArray,该结构体已经动态申请过内存了)
	MyArray->pArr = (int*)malloc(sizeof(int) * MyArray->capacity);
	//返回该结构体
	return MyArray;
}

void Insert_Array(Dynamic* arr,int value)//value表示要插入的值，一次只能插入一个值
{
	if (arr == NULL)
		return;
	//1.判断最大空间是否足够
	if (arr->size == arr->capacity)//当size的大小和capacity一样大时，表示空间已满，若要插入别的元素，就需要扩大空间
	{
		//1.申请一块更大的内存（默认是原内存的两倍），给数组申请
		int* newspace = (int*)malloc(sizeof(int) * arr->capacity * 2);
		//2.拷贝数据到新内存中 - 使memcpy函数
		//	memcpy(库函数为string.h)中一共有三个参数，第一个为新空间的地址，第二个为旧空间的地址，第三个为旧空间的总大小(单位为字节)
		memcpy(newspace, arr->pArr, sizeof(int) * arr->size);
		//3.释放旧空间
		free(arr->pArr);
		//4.更新容量大小，改变新数组的名字
		arr->capacity *= 2;
		arr->pArr = newspace;
	}
	//2.插入
	arr->size++;
	arr->pArr[arr->size-1] = value;
}

int FindByPos_Array(Dynamic* arr, int pos)
{
	if (arr == NULL)
		return -1;
	//1.判断位置是否有效,位置的有效长度为[1,arr->size]
	if (pos <= 0 || pos > arr->size)
	{
		printf("输入的位置出现错误!\n");
		return 0;
	}
	pos--;//位置==下标+1
	//2.查找元素
	return arr->pArr[pos];
}

int FindByValue_Array(Dynamic* arr, int value)
{
	if (arr == NULL)
		return -1;
	int pos = -1;
	for (int i = 0; i < arr->size; i++)
	{
		if (value == arr->pArr[i])
		{
			pos = i + 1;
			break;
		}
	}
	return pos;
}

void DeleteByPos_Array(Dynamic*arr,int pos)
{
	if (arr == NULL)
		return;
	//1.判断位置是否有效,位置的有效长度为[1,arr->size]
	if (pos <= 0 || pos > arr->size)
	{
		printf("输入的位置出现错误!\n");
		return;
	}
	//2.删除元素
	for (int i = pos; i < arr->size; i++)
	{
		arr->pArr[i - 1] = arr->pArr[i];
	}
	//3.更新容量
	arr->size--;
}

void DeleteByValue_Array(Dynamic* arr, int value)
{
	if (arr == NULL)
		return;
	//1.调用函数找到元素位置
	int pos = FindByValue_Array(arr, value);
	//2.根据位置调用函数删除元素
	DeleteByPos_Array(arr, pos);
}

void Print_Array(Dynamic* arr)
{
	if (arr == NULL)
		return;
	for (int i = 0; i < arr->size; i++)
	{
		printf("%d ", arr->pArr[i]);
	}
	printf("\n");
}

int GetCapacity_Array(Dynamic* arr)
{
	if (arr == NULL)
		return 0;
	return arr->capacity;
}

int GetSize_Array(Dynamic* arr)
{
	if (arr == NULL)
		return 0;
	return arr->size;
}

void FreeSpace_Array(Dynamic* arr)
{
	if (arr == NULL)
		return;
	//一共动态申请过两次，所以要释放两次空间
	if (arr->pArr != NULL)
	{
		free(arr->pArr);//释放数组空间
	}
	free(arr);//释放结构体空间（注意顺序）
}

void Clear_Array(Dynamic* arr)
{
	if (arr == NULL)
		return;
	//pArr中数组元素是根据size的值来确定数组元素个数，所以当size=0时，数组元素个数为0
	arr->size = 0;
	printf("\n");
}

void Print_capsiz(Dynamic* arr)
{
	printf("数组容量为：>\t%d\n", arr->capacity);
	printf("数组当前元素个数为：>\t%d\n", arr->size);
}
