#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 20
//结构体定义
typedef struct
{
	int num;//书号
	char name[20];//书名
	float price;//书籍价格
}Book_infor;

typedef struct
{
	int capacity;//最多可存放的数目
	int size;//当前书籍的数目
	Book_infor* Message;
}sBook;

//顺序表初始化 
sBook* Init_book()
{
	sBook* Book = (sBook*)malloc(sizeof(sBook));

	Book->size = 0;
	Book->capacity = MAX;
	Book->Message = (Book_infor*)malloc(sizeof(Book_infor) * Book->capacity);//动态申请数组

	return Book;
}

//插入函数
void Insert_book(sBook* Book)
{
	Book_infor temp;
	if (Book == NULL)
		return;
	if (Book->size >= Book->capacity)
	{
		printf("对不起，图书馆已满\n");
		return;
	}
	printf("请输入图书相关信息：编号，书名，价格\n");
	scanf("%d%s%f", &Book->Message[Book->size].num, Book->Message[Book->size].name, &Book->Message[Book->size].price);
	Book->size++;
	printf("目前书籍数目：%d\n", Book->size);
	int site = -1;
	do
	{
		printf("请输入插入位置：>\t");
		scanf("%d", &site);
		if (site > Book->size)
		{
			printf("对不起，图书位置不足,请重新输入.");
			continue;
		}
		else
		{
			temp = Book->Message[site-1];
			Book->Message[site-1] = Book->Message[Book->size-1];
			Book->Message[Book->size - 1] = temp;
		}
		site = 0;
	} while (site);
}

//删除函数
void Delete_book(sBook* Book, int site)
{
	if (Book == NULL)
		return;
	//判断位置是否有效
	if (site <= 0 || site > Book->size)
	{
		printf("位置无效！\n");
		return;
	}
	//删除书籍并更新书籍位置
	for (int i = site ; i < Book->size; i++)
	{
		Book->Message[i - 1] = Book->Message[i];
	}
	//更新书籍数目
	Book->size--;
}

//显示函数
void Show_book(sBook* Book)
{
	if (Book == NULL)
		return;
	printf("\t\t书籍编号\t书名\t价格\t位置\n");
	for (int i = 0; i < Book->size; i++)
	{
		printf("\t\t%d\t\t%s\t%.2f\t%d\n", Book->Message[i].num, Book->Message[i].name, Book->Message[i].price, i + 1);
	}
	printf("已显示图书相关信息\n");
}

//查找函数
void Find_book(sBook* Book, int pos)
{
	if (Book == NULL)
		return;
	//判断位置是否有效
	if (pos <= 0 || pos > Book->size)
	{
		printf("位置无效！\n");
		return;
	}
	printf("\t\t书籍编号\t书名\t价格\t位置\n");
	printf("\t\t%d\t%s\t%.2f\t%d\n", Book->Message[pos - 1].num, Book->Message[pos - 1].name, Book->Message[pos - 1].price, pos);
}

//主菜单函数
int menu()
{
	printf("************Welcome  to  library  manage  system***************\n");
	printf("***********  1.Insert book       2.Delete book  ***************\n");
	printf("***********  3.Show book         4.Find book    ***************\n");
	printf("******************    0.exit system    ************************\n");
	printf("***************************************************************\n");
	printf("Please input number：>\t");
	int count;
	scanf("%d", &count);
	return count;
}

int main()
{
	sBook* Book = Init_book();
	int ret = 1;
	int place;
	int pos;
	while (ret)
	{
		ret = menu();
		switch (ret)
		{
		case 1:
			Insert_book(Book);
			break;
		case 2:
			printf("请输入书籍位置：>\t");
			scanf("%d", &place);
			Delete_book(Book, place);
			break;
		case 3:
			Show_book(Book);
			break;
		case 4:
			printf("请输入书籍位置：>\t");
			scanf("%d", &pos);
			Find_book(Book, pos);
			break;
		case 0:
			printf("exit program!\n");
			break;
		default:
			printf("input error,please input again!\n");
			break;
		}
	}

	return 0;
}
